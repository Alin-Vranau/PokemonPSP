package screens;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import org.json.JSONObject;

import objects.Move;
import objects.Pokemon;
import objects.Type;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class BattlePanel extends JPanel {

    static JPanel interactivePanel; // Panel con la zona inferior de la pantalla
    static JPanel fightPanel; // Panel con el campo de batalla
    static JPanel dialogPanel; // Panel con dialogos
    static JPanel optionPanel; // Panel de opciones (Luchar, huir)
    static JPanel attacksPanel; // Panel con los ataques
    static PokemonStatus enemyStatus; // Estado del pokemon enemigo
    static PokemonStatus playerStatus; // Estado del pokemon del jugador
    static BattlePanel gamePanel; // Panel que contiene todos los elementos la pantalla
    static JLabel playersPokemonImage; // Imagen del pokemon del jugador
    static JLabel enemysPokemonImage; // Imagen del pokemon enemigo
    static int optionsSize = 0; // Tamaño que tiene la seleccion de accion
    static int healthStatusWidth; // Ancho del cuadro de vida
    static int healthStatusHeigth; // Alto del cuadro de vida

    static Pokemon playerPokemon; // El pokemon actual del jugador
    static Pokemon enemyPokemon; // El pokemon actual del enemigo


    public static void main(String[] args) {
        JFrame window = new JFrame();
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.setResizable(false);
        window.setSize(700, 500); // 700, 500
        window.setTitle("Batalla");

        Type.initializeTypes();

        // Crear el panel del juego y pasarlo a la ventana
        gamePanel = new BattlePanel(window.getWidth(), window.getHeight(), new Pokemon("Mudkip"),
                new Pokemon("Tarountula") );
        window.add(gamePanel);
        
        
        //window.pack();
        //window.setLocationRelativeTo(null);
        window.setVisible(true);
    }

    public BattlePanel(int width, int height, Pokemon playerPoke, Pokemon enemyPoke) {
        // Ajustes del panel
        this.setSize(new Dimension(width, height));
        this.setDoubleBuffered(true);
		this.setFocusable(true);
        this.setLayout(new BorderLayout());
        this.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));


        playerPokemon = playerPoke;
        enemyPokemon = enemyPoke;

        // Se calcula el tamaño del panel de opciones
        optionsSize = Math.round(getHeight() * 0.30f);
        
        // Se crea el panel que tiene la zona de batalla
        fightPanel = new JPanel();
        fightPanel.setLayout(null);
        fightPanel.setPreferredSize(new Dimension(getWidth(), getHeight() - optionsSize));
        fightPanel.setBackground(new Color(0,0,0,0));


        // Calculo del ancho y alto de los paneles de vida
        healthStatusWidth = (int) (fightPanel.getPreferredSize().width * 0.35);
        healthStatusHeigth = (int) (fightPanel.getPreferredSize().height * 0.25);
        
        // Se añaden los pokemons y sus barras de vida a la pantalla
        //Pokemon enemyPokemon = new Pokemon("Pikachu", 300, new ArrayList<>());
        
        placeEnemyPokemon(enemyPokemon);

        //Pokemon playerPokemon = new Pokemon("Venusaur", 600, new ArrayList<>());            
        
        placePlayerPokemon(playerPokemon);
       
        // Creacion del panel que contendra los paneles que se utilicen en la parte inferior de la pantalla
        interactivePanel = new JPanel();
        interactivePanel.setPreferredSize(new Dimension(getWidth(), optionsSize));
        interactivePanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Color.BLACK, 3, true), BorderFactory.createLineBorder(Color.BLACK, 3, true)));
        interactivePanel.setBackground(Color.WHITE);
        interactivePanel.setLayout(new BorderLayout());

        // Creacion del panel de acciones (Atacar, huir, ¿capturar?, ¿Pokemons?)
        optionPanel = new JPanel();
        optionPanel.setPreferredSize(interactivePanel.getPreferredSize());
        //optionPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Color.BLACK, 3, true), BorderFactory.createLineBorder(Color.BLACK, 3, true)));
        optionPanel.setBackground(new Color(0,0,0,0));
        optionPanel.setLayout(new GridBagLayout());

        interactivePanel.add(optionPanel);


        add(fightPanel, BorderLayout.CENTER);
        add(interactivePanel, BorderLayout.SOUTH);
        
        // Constraints temporales para los botones del panel de acciones
        GridBagConstraints cons = new GridBagConstraints();
        cons.fill = GridBagConstraints.BOTH;
        cons.weightx= 0.3;
        cons.weighty = 0.5;
        
        // Creacion de los botones del panes el opciones
        JButton boton = new JButton("Atacar");
        boton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                //enemyPokemon.setActualHealth(enemyPokemon.getActualHealth() - 50);
                //enemyStatus.updateHealth();
                optionPanel.setVisible(false);
                createAttacksPanel();
            }
            
        });
        optionPanel.add(boton,cons);

        // TODO: Encontrar como cerrar el panel desde el propio panel (Posibilidad de eliminar este boton ya que rompe el estilo de juego)
        JButton boton2 = new JButton("Huir");
        //boton2.setPreferredSize(new Dimension((int) (optionPanel.getPreferredSize().width/2), optionPanel.getPreferredSize().height));
        boton2.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                
            }
            
        });

        optionPanel.add(boton2,cons);

        
    }


    private void createAttacksPanel() {
        
        if (attacksPanel != null) {
            interactivePanel.remove(attacksPanel);
        }

        attacksPanel = new JPanel();
        attacksPanel.setPreferredSize(new Dimension(interactivePanel.getWidth(), interactivePanel.getHeight()));
        attacksPanel.setLayout(new GridBagLayout());

        Insets i1 = new Insets(10, 15, 15, 15);
        GridBagConstraints topButtonsConstraints = new GridBagConstraints();
        topButtonsConstraints.fill = GridBagConstraints.BOTH;
        topButtonsConstraints.weightx = 0.4;
        topButtonsConstraints.weighty = 1;
        topButtonsConstraints.gridy = 0;
        topButtonsConstraints.gridwidth = 2;
        topButtonsConstraints.insets= i1;

        Insets i2 = new Insets(0, 15, 15, 15);
        GridBagConstraints bottomButtonsConstraints = new GridBagConstraints();
        bottomButtonsConstraints.fill = GridBagConstraints.BOTH;
        bottomButtonsConstraints.weightx = 1;
        bottomButtonsConstraints.weighty = 1;
        bottomButtonsConstraints.gridy = 1;
        bottomButtonsConstraints.ipadx = 3;
        bottomButtonsConstraints.gridwidth = 2;
        bottomButtonsConstraints.insets = i2;

        Insets i3 = new Insets(0, 15, 5, 15);
        GridBagConstraints backButtonConstraints = new GridBagConstraints();
        backButtonConstraints.fill = GridBagConstraints.BOTH;
        backButtonConstraints.weighty = 0.5;
        backButtonConstraints.anchor = GridBagConstraints.PAGE_END; // Se ajusta la posicion en la esquina inferior derecha
        backButtonConstraints.insets = i3;
        backButtonConstraints.gridx = 2;
        backButtonConstraints.gridwidth = 2;
        backButtonConstraints.gridy = 2;
        backButtonConstraints.gridheight = 1;

        
        JButton[] attackButtons = new JButton[4];
        int index = 0;
        for (Move move : playerPokemon.getMoves()) {
            JButton attack = new JButton(move.getName());
            adjustFontSize(attack, 0.8);

            attack.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    // TODO: Crear dialogo para que se muestre el ataque usado y su efectividad
                    playerPokemon.attack(move, enemyPokemon);
                    enemyStatus.updateHealth();
                    attacksPanel.setVisible(false);
                    
                    int randomAttack = (int) Math.random()*4;

                    for (Move move : enemyPokemon.getMoves()) {
                        if (randomAttack == 0) {
                            enemyPokemon.attack(move, playerPokemon);
                            break;
                        }
                        randomAttack--;
                    }

                    playerStatus.updateHealth();
                    optionPanel.setVisible(true);
                }
                
            });

            attackButtons[index] = attack;
            index++;
        }

        /*JButton attack1 = new JButton(playerPokemon.getMoves());
        adjustFontSize(attack1, 0.9);
        JButton attack2 = new JButton("Ataque 2");
        adjustFontSize(attack2, 0.9);
        JButton attack3 = new JButton("Ataque 3");
        adjustFontSize(attack3, 0.9);
        JButton attack4 = new JButton("Ataque 4");
        adjustFontSize(attack4, 0.9);
        */
        JButton back = new JButton("Volver");
        adjustFontSize(back, 0.6);
        back.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                attacksPanel.setVisible(false);
                optionPanel.setVisible(true);
            }
            
        });

        attacksPanel.add(attackButtons[0], topButtonsConstraints);
        attacksPanel.add(attackButtons[1], topButtonsConstraints);
        attacksPanel.add(attackButtons[2], bottomButtonsConstraints);
        attacksPanel.add(attackButtons[3], bottomButtonsConstraints);
        attacksPanel.add(back, backButtonConstraints);

        interactivePanel.add(attacksPanel, BorderLayout.EAST);

    }


    /**
     * Metodo que coloca la imagen del pokemon enemigo y su vida en la zona de batalla
     * @param pokemon - El pokemon enemigo
     */
    private void placeEnemyPokemon(Pokemon pokemon) {
        
        // Si ya habia un pokemon se elimina la imagen de este y su vida
        if (enemyStatus != null) {
            fightPanel.remove(enemyStatus);
        }

        if (enemysPokemonImage != null) {
            fightPanel.remove(enemysPokemonImage);
        }

        // Se añade la vida del pokemon
        enemyStatus = new PokemonStatus(healthStatusWidth, healthStatusHeigth, pokemon, true);
        enemyStatus.setLocation((int) (fightPanel.getPreferredSize().width * 0.05), (int) (fightPanel.getPreferredSize().height * 0.05));
        fightPanel.add(enemyStatus);

        // Se obtiene la imagen del pokemon de la PokeApi
        ImageIcon poke = null;
		
        // Imagen auxiliar para reescalado
        ImageIcon imgPokemon = null; 
        try {

						URL urlPokemon = new URL("https://pokeapi.co/api/v2/pokemon/"+ pokemon.getName().toLowerCase());
						HttpURLConnection conPokemon = (HttpURLConnection) urlPokemon.openConnection();
						conPokemon.setRequestMethod("GET");

						String inputLine;

						BufferedReader in = new BufferedReader(new InputStreamReader(conPokemon.getInputStream()));
						StringBuilder responsePokemon = new StringBuilder();
						while ((inputLine = in.readLine()) != null) {
							responsePokemon.append(inputLine);
						}
						in.close();

						// Imagen
						JSONObject jsonResponse = new JSONObject(responsePokemon.toString());
						String frontDefaultPng = jsonResponse.getJSONObject("sprites").getString("front_default");
						URL frontDefaultPngUrl = new URL(frontDefaultPng);

						imgPokemon = new ImageIcon(frontDefaultPngUrl);

                    } catch (IOException e1) {
						e1.printStackTrace();
					}
        // Se reescala la imagen
        poke = new ImageIcon(imgPokemon.getImage().getScaledInstance((int)(fightPanel.getPreferredSize().width*0.3),
                    (int)(fightPanel.getPreferredSize().height*0.5), Image.SCALE_DEFAULT));

        // Creacion de la etiqueta con la imagen del pokemon ajustandose su tamaño y posicion
        enemysPokemonImage = new JLabel(poke);
        enemysPokemonImage.setSize(new Dimension((int)(fightPanel.getPreferredSize().width*0.35),
                                        (int)(fightPanel.getPreferredSize().height*0.4)));
        enemysPokemonImage.setLocation(fightPanel.getPreferredSize().width - (int)(enemysPokemonImage.getWidth()*1.3),
                                            (int)(enemysPokemonImage.getWidth()*0.20));
        fightPanel.add(enemysPokemonImage);
    }

    /**
     * Metodo que coloca la imagen del pokemon del jugador y su vida en la pantalla
     * @param pokemon - El pokemon a colocar
     */
    private void placePlayerPokemon(Pokemon pokemon) {

        if (playerStatus != null) {
            fightPanel.remove(playerStatus);
        }

        if (playersPokemonImage != null) {
            fightPanel.remove(playersPokemonImage);
        }

        playerStatus = new PokemonStatus(healthStatusWidth, healthStatusHeigth, pokemon, false);
        playerStatus.setLocation((int) (fightPanel.getPreferredSize().width - fightPanel.getPreferredSize().width*0.40),
             (int) (fightPanel.getPreferredSize().height - fightPanel.getPreferredSize().height * 0.40));
        fightPanel.add(playerStatus);

        ImageIcon poke = null;
		
        ImageIcon imgPokemon = null;
        try {

						URL urlPokemon = new URL("https://pokeapi.co/api/v2/pokemon/" + pokemon.getName().toLowerCase());
						HttpURLConnection conPokemon = (HttpURLConnection) urlPokemon.openConnection();
						conPokemon.setRequestMethod("GET");

						String inputLine;

						BufferedReader in = new BufferedReader(new InputStreamReader(conPokemon.getInputStream()));
						StringBuilder responsePokemon = new StringBuilder();
						while ((inputLine = in.readLine()) != null) {
							responsePokemon.append(inputLine);
						}
						in.close();

						// Imagen
						JSONObject jsonResponse = new JSONObject(responsePokemon.toString());
						String backDefaultPng = jsonResponse.getJSONObject("sprites").getString("back_default");
						URL backDefaultPngUrl = new URL(backDefaultPng);

						imgPokemon = new ImageIcon(backDefaultPngUrl);

                    } catch (IOException e1) {
						e1.printStackTrace();
					}

        poke = new ImageIcon(imgPokemon.getImage().getScaledInstance((int)(fightPanel.getPreferredSize().width*0.4),
            (int)(fightPanel.getPreferredSize().height*0.7), Image.SCALE_DEFAULT));

        playersPokemonImage = new JLabel(poke);
        playersPokemonImage.setSize(new Dimension((int)(fightPanel.getPreferredSize().width*0.40),
            (int)(fightPanel.getPreferredSize().height*0.6)));
        playersPokemonImage.setLocation((int)(fightPanel.getPreferredSize().width*0.05) ,
            fightPanel.getPreferredSize().height - optionsSize - (int)(fightPanel.getPreferredSize().height*0.05));
        fightPanel.add(playersPokemonImage);
    }

    @Override
    protected void paintComponent(Graphics g) {
        // Se añade la imagen de fondo de la pelea
        super.paintComponent(g);

        BufferedImage imagen = null;
        try {
            imagen = ImageIO.read(getClass().getResourceAsStream("/battle_screen/battle.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        g.drawImage(imagen, 0, 0, getWidth(), getHeight() - optionsSize, null); // Se escala la imagen
    }


    private void adjustFontSize(JButton button, double multiplier) {
        Font buttonFont = button.getFont();
        String buttonText = button.getText();

        int stringWidth = button.getFontMetrics(buttonFont).stringWidth(buttonText);
        int componentWidth = button.getPreferredSize().width;

        double widthRatio = (double)componentWidth / (double)stringWidth;

        int newFontSize = (int)(buttonFont.getSize() * widthRatio * multiplier);
        int componentHeight = button.getPreferredSize().height;

        int fontSizeToUse = Math.min(newFontSize, componentHeight);

        button.setFont(new Font(buttonFont.getName(), Font.PLAIN, fontSizeToUse));
    }
    
}
